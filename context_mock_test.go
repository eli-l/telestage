// Code generated by MockGen. DO NOT EDIT.
// Source: context.go
//
// Generated by this command:
//
//	mockgen -destination=context_mock_test.go -package=telestage_test -source=context.go
//

// Package telestage_test is a generated GoMock package.
package telestage_test

import (
	reflect "reflect"

	tgbotapi "github.com/eli-l/telegram-bot-api/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockBotContext is a mock of BotContext interface.
type MockBotContext struct {
	ctrl     *gomock.Controller
	recorder *MockBotContextMockRecorder
}

// MockBotContextMockRecorder is the mock recorder for MockBotContext.
type MockBotContextMockRecorder struct {
	mock *MockBotContext
}

// NewMockBotContext creates a new mock instance.
func NewMockBotContext(ctrl *gomock.Controller) *MockBotContext {
	mock := &MockBotContext{ctrl: ctrl}
	mock.recorder = &MockBotContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotContext) EXPECT() *MockBotContextMockRecorder {
	return m.recorder
}

// Bot mocks base method.
func (m *MockBotContext) Bot() *tgbotapi.BotAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bot")
	ret0, _ := ret[0].(*tgbotapi.BotAPI)
	return ret0
}

// Bot indicates an expected call of Bot.
func (mr *MockBotContextMockRecorder) Bot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bot", reflect.TypeOf((*MockBotContext)(nil).Bot))
}

// Chat mocks base method.
func (m *MockBotContext) Chat() *tgbotapi.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat")
	ret0, _ := ret[0].(*tgbotapi.Chat)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MockBotContextMockRecorder) Chat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockBotContext)(nil).Chat))
}

// ChatID mocks base method.
func (m *MockBotContext) ChatID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ChatID indicates an expected call of ChatID.
func (mr *MockBotContextMockRecorder) ChatID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatID", reflect.TypeOf((*MockBotContext)(nil).ChatID))
}

// Get mocks base method.
func (m *MockBotContext) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockBotContextMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBotContext)(nil).Get), key)
}

// Message mocks base method.
func (m *MockBotContext) Message() *tgbotapi.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(*tgbotapi.Message)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockBotContextMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockBotContext)(nil).Message))
}

// Reply mocks base method.
func (m *MockBotContext) Reply(arg0 string) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", arg0)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reply indicates an expected call of Reply.
func (mr *MockBotContextMockRecorder) Reply(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockBotContext)(nil).Reply), arg0)
}

// ReplyHTML mocks base method.
func (m *MockBotContext) ReplyHTML(arg0 string) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyHTML", arg0)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplyHTML indicates an expected call of ReplyHTML.
func (mr *MockBotContextMockRecorder) ReplyHTML(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyHTML", reflect.TypeOf((*MockBotContext)(nil).ReplyHTML), arg0)
}

// ReplyQuote mocks base method.
func (m *MockBotContext) ReplyQuote(arg0 string) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyQuote", arg0)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplyQuote indicates an expected call of ReplyQuote.
func (mr *MockBotContextMockRecorder) ReplyQuote(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyQuote", reflect.TypeOf((*MockBotContext)(nil).ReplyQuote), arg0)
}

// ReplyWithMenu mocks base method.
func (m *MockBotContext) ReplyWithMenu(arg0 string, arg1 any) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyWithMenu", arg0, arg1)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplyWithMenu indicates an expected call of ReplyWithMenu.
func (mr *MockBotContextMockRecorder) ReplyWithMenu(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyWithMenu", reflect.TypeOf((*MockBotContext)(nil).ReplyWithMenu), arg0, arg1)
}

// ReplyWithMenuHTML mocks base method.
func (m *MockBotContext) ReplyWithMenuHTML(arg0 string, arg1 any) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyWithMenuHTML", arg0, arg1)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplyWithMenuHTML indicates an expected call of ReplyWithMenuHTML.
func (mr *MockBotContextMockRecorder) ReplyWithMenuHTML(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyWithMenuHTML", reflect.TypeOf((*MockBotContext)(nil).ReplyWithMenuHTML), arg0, arg1)
}

// Sender mocks base method.
func (m *MockBotContext) Sender() *tgbotapi.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(*tgbotapi.User)
	return ret0
}

// Sender indicates an expected call of Sender.
func (mr *MockBotContextMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockBotContext)(nil).Sender))
}

// Set mocks base method.
func (m *MockBotContext) Set(key string, val any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, val)
}

// Set indicates an expected call of Set.
func (mr *MockBotContextMockRecorder) Set(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBotContext)(nil).Set), key, val)
}

// SetDisableWebPreviewForShortMethods mocks base method.
func (m *MockBotContext) SetDisableWebPreviewForShortMethods(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDisableWebPreviewForShortMethods", arg0)
}

// SetDisableWebPreviewForShortMethods indicates an expected call of SetDisableWebPreviewForShortMethods.
func (mr *MockBotContextMockRecorder) SetDisableWebPreviewForShortMethods(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDisableWebPreviewForShortMethods", reflect.TypeOf((*MockBotContext)(nil).SetDisableWebPreviewForShortMethods), arg0)
}

// Text mocks base method.
func (m *MockBotContext) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockBotContextMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockBotContext)(nil).Text))
}

// Upd mocks base method.
func (m *MockBotContext) Upd() *tgbotapi.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upd")
	ret0, _ := ret[0].(*tgbotapi.Update)
	return ret0
}

// Upd indicates an expected call of Upd.
func (mr *MockBotContextMockRecorder) Upd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upd", reflect.TypeOf((*MockBotContext)(nil).Upd))
}
